{"version":3,"file":"static/js/627.d59fe626.chunk.js","mappings":"kOAKMA,EAAiB,CACrB,CAAEC,MAAO,WAAYC,QAAS,CAAC,OAAQ,MAAO,aAAc,eAC5D,CACED,MAAO,YACPC,QAAS,CAAC,QAAS,YAErB,CACED,MAAO,UACPC,QAAS,CACP,YACA,gCAAE,WACO,kBAAM,iBAEf,YACA,WAKAC,EAAgB,CACpB,CAAEF,MAAO,WAAYC,QAAS,CAAC,UAAW,SAAU,WACpD,CAAED,MAAO,YAAaC,QAAS,CAAC,YAChC,CACED,MAAO,MACPC,QAAS,CACP,WACA,YACA,SACA,MACA,SACA,SACA,cAgEN,MA3DA,WACE,OAAkCE,EAAAA,EAAAA,GAAmB,CACnDC,UAAU,IACV,eAFKC,EAAY,KAAEC,EAAS,KAIxBC,EAAgB,SAACC,GAAS,qBAAaF,GAAaE,EAAS,EAEnE,OACE,gBAAKC,UAAU,SAASC,IAAKL,EAAa,UACxC,qBAASM,GAAG,aAAaF,UAAU,UAAS,WAC1C,cAAGA,UAAWF,EAAc,UAAU,SAAC,2BACvC,eAAIE,UAAWF,EAAc,UAAU,SAAC,yBACxC,iBAAKE,UAAS,qBAAgBF,EAAc,cAAe,WACzD,iBAAKE,UAAS,mBAAqB,WACjC,wBAAI,0BACJ,gBAAKA,UAAS,yBAA2B,SACtCV,EAAea,KAAI,SAACC,EAAOC,GAC1B,OACE,iBAAKL,UAAU,QAAO,WACpB,cAAGA,UAAU,cAAa,SAAEI,EAAMb,QACjCa,EAAMZ,QAAQW,KAAI,SAACG,EAAMD,GACxB,OACE,iBAAiBL,UAAU,gBAAe,WACxC,SAAC,KAAU,KACX,uBAAIM,MAFID,EAKd,MAT0BA,EAYhC,UAGJ,iBAAKL,UAAS,mBAAqB,WACjC,wBAAI,yBACJ,gBAAKA,UAAU,wBAAuB,SACnCP,EAAcU,KAAI,SAACC,EAAOC,GACzB,OACE,iBAAKL,UAAU,QAAO,WACpB,cAAGA,UAAU,cAAa,SAAEI,EAAMb,QACjCa,EAAMZ,QAAQW,KAAI,SAACG,EAAMD,GACxB,OACE,iBAAiBL,UAAU,gBAAe,WACxC,SAAC,KAAU,KACX,uBAAIM,MAFID,EAKd,MAT0BA,EAYhC,gBAOd,C,4EChGaX,EAAqB,SAACa,GACjC,IAAMX,GAAeY,EAAAA,EAAAA,QAAO,MAC5B,GAAkCC,EAAAA,EAAAA,WAAS,GAAM,eAA1CZ,EAAS,KAAEa,EAAY,KAcxBC,EAAWJ,EAAQZ,SALG,SAACiB,GAC3B,IAAOC,GAAP,OAAgBD,EAAO,GAAX,GACZF,EAAaG,EAAMC,eACrB,EAVmB,SAACF,IAClB,OAAgBA,EAAO,GAAX,GACFE,gBACRJ,GAAa,EAEjB,EAoBA,OAXAK,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAsBpB,EAAaqB,QACnCC,EAAW,IAAIC,qBAAqBR,EAAUJ,GAIpD,OAFIS,GAAqBE,EAASE,QAAQJ,GAEnC,WACDA,GAAqBE,EAASG,UAAUL,EAC9C,CACF,GAAG,CAACpB,EAAcW,EAASI,IAEpB,CAACf,EAAcC,EACxB,C","sources":["component/experience/Experience.js","hooks/useElementOnScreen.js"],"sourcesContent":["import React from \"react\";\nimport \"./experience.css\";\nimport { MdVerified } from \"react-icons/md\";\nimport { useElementOnScreen } from \"../../hooks/useElementOnScreen\";\n\nconst frontendSkills = [\n  { title: \"Language\", content: [\"HTML\", \"CSS\", \"JavaScript\", \"TypeScript\"] },\n  {\n    title: \"Framework\",\n    content: [\"React\", \"Next.js\"],\n  },\n  {\n    title: \"Library\",\n    content: [\n      \"Tailwind\",\n      <>\n        Styled <br /> Components\n      </>,\n      \"Bootstrap\",\n      \"Redux\",\n    ],\n  },\n];\n\nconst backendSkills = [\n  { title: \"Language\", content: [\"Node.js\", \"Python\", \"SQLite\"] },\n  { title: \"Framework\", content: [\"Express\"] },\n  {\n    title: \"Dev\",\n    content: [\n      \"Firebase\",\n      \"Firestore\",\n      \"Vercel\",\n      \"Git\",\n      \"GitHub\",\n      \"ESLint\",\n      \"Prettier\",\n    ],\n  },\n];\n\nfunction Skill() {\n  const [containerRef, isVisible] = useElementOnScreen({\n    reappear: true,\n  });\n\n  const animationText = (animation) => `hide ${isVisible && animation}`;\n\n  return (\n    <div className=\"sticky\" ref={containerRef}>\n      <section id=\"experience\" className=\"section\">\n        <p className={animationText(\"appear\")}>Meet My Proficiencies</p>\n        <h2 className={animationText(\"appear\")}>Professional Skills</h2>\n        <div className={`skills-row ${animationText(\"appear_d1\")}`}>\n          <div className={`container-skills`}>\n            <h3>Frontend Development</h3>\n            <div className={`skills-list-container `}>\n              {frontendSkills.map((skill, index) => {\n                return (\n                  <div className=\"skill\" key={index}>\n                    <p className=\"skill-title\">{skill.title}</p>\n                    {skill.content.map((item, index) => {\n                      return (\n                        <div key={index} className=\"skill-content\">\n                          <MdVerified />\n                          <p>{item}</p>\n                        </div>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className={`container-skills`}>\n            <h3>Backend Development</h3>\n            <div className=\"skills-list-container\">\n              {backendSkills.map((skill, index) => {\n                return (\n                  <div className=\"skill\" key={index}>\n                    <p className=\"skill-title\">{skill.title}</p>\n                    {skill.content.map((item, index) => {\n                      return (\n                        <div key={index} className=\"skill-content\">\n                          <MdVerified />\n                          <p>{item}</p>\n                        </div>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Skill;\n","import { useEffect, useRef, useState } from \"react\";\n\nexport const useElementOnScreen = (options) => {\n  const containerRef = useRef(null);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const makeAppear = (entries) => {\n    const [entry] = entries;\n    if (entry.isIntersecting) {\n      setIsVisible(true);\n    }\n  };\n\n  const makeAppearRepeating = (entries) => {\n    const [entry] = entries;\n    setIsVisible(entry.isIntersecting);\n  };\n\n  const callback = options.reappear ? makeAppearRepeating : makeAppear;\n\n  useEffect(() => {\n    const containerRefCurrent = containerRef.current;\n    const observer = new IntersectionObserver(callback, options);\n\n    if (containerRefCurrent) observer.observe(containerRefCurrent);\n\n    return () => {\n      if (containerRefCurrent) observer.unobserve(containerRefCurrent);\n    };\n  }, [containerRef, options, callback]);\n\n  return [containerRef, isVisible];\n};\n"],"names":["frontendSkills","title","content","backendSkills","useElementOnScreen","reappear","containerRef","isVisible","animationText","animation","className","ref","id","map","skill","index","item","options","useRef","useState","setIsVisible","callback","entries","entry","isIntersecting","useEffect","containerRefCurrent","current","observer","IntersectionObserver","observe","unobserve"],"sourceRoot":""}