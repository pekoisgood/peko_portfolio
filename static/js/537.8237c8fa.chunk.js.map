{"version":3,"file":"static/js/537.8237c8fa.chunk.js","mappings":"2PAqGA,EA5FgB,WACd,IAAMA,GAAOC,EAAAA,EAAAA,UACb,GAAkCC,EAAAA,EAAAA,GAAmB,CACnDC,UAAU,IACV,eAFKC,EAAY,KAAEC,EAAS,KAIxBC,EAAgB,SAACC,GAAS,qBAAaF,GAAaE,EAAS,EAwBnE,OACE,qBAASC,GAAG,UAAUC,UAAU,UAAUC,IAAKN,EAAa,WAC1D,cAAGK,UAAS,UAAKH,EAAc,WAAY,SAAC,2BAC5C,eAAIG,UAAS,UAAKH,EAAc,WAAY,SAAC,gBAC7C,iBAAKG,UAAU,qBAAoB,WACjC,iBAAKA,UAAS,kBAAoB,WAChC,qBAASA,UAAS,yBAAoBH,EAAc,cAAe,WACjE,SAAC,MAAa,KACd,wBAAI,WACJ,wBAAI,2BACJ,cAAGK,KAAK,+BAA+BC,OAAO,SAAQ,SAAC,uBAIzD,qBAASH,UAAS,yBAAoBH,EAAc,cAAe,WACjE,SAAC,MAAe,KAChB,wBAAI,eACJ,wBAAI,+BACJ,cACEK,KAAK,8CACLC,OAAO,SAAQ,SAChB,uBAIH,qBAASH,UAAS,yBAAoBH,EAAc,cAAe,WACjE,SAAC,MAAc,KACf,wBAAI,WACJ,wBAAI,qBACJ,cAAGK,KAAK,kBAAkBC,OAAO,SAAQ,SAAC,0BAM9C,kBACEF,IAAKV,EACLa,SA3DU,SAACC,GACjBA,EAAEC,iBAEFC,EAAAA,GAAAA,SAEI,kBACA,mBACAhB,EAAKiB,QACL,qBAEDC,MACC,SAACC,GACCC,QAAQC,IAAIF,EAAOG,KACrB,IACA,SAACC,GACCH,QAAQC,IAAIE,EAAMD,KACpB,IAGJR,EAAEF,OAAOY,OACX,EAwCQf,UAAWH,EAAc,aAAa,WAEtC,kBACEmB,KAAK,OACLC,KAAK,OACLC,YAAY,iBACZC,UAAQ,KAEV,kBAAOH,KAAK,QAAQC,KAAK,QAAQC,YAAY,aAAaC,UAAQ,KAClE,qBACEF,KAAK,UACLG,IAAI,IACJF,YAAY,eACZC,UAAQ,KAEV,mBAAQH,KAAK,SAAShB,UAAU,kBAAiB,SAAC,yBAO5D,C,4ECjGaP,EAAqB,SAAC4B,GACjC,IAAM1B,GAAeH,EAAAA,EAAAA,QAAO,MAC5B,GAAkC8B,EAAAA,EAAAA,WAAS,GAAM,eAA1C1B,EAAS,KAAE2B,EAAY,KAcxBC,EAAWH,EAAQ3B,SALG,SAAC+B,GAC3B,IAAOC,GAAP,OAAgBD,EAAO,GAAX,GACZF,EAAaG,EAAMC,eACrB,EAVmB,SAACF,IAClB,OAAgBA,EAAO,GAAX,GACFE,gBACRJ,GAAa,EAEjB,EAoBA,OAXAK,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAsBlC,EAAaa,QACnCsB,EAAW,IAAIC,qBAAqBP,EAAUH,GAIpD,OAFIQ,GAAqBC,EAASE,QAAQH,GAEnC,WACDA,GAAqBC,EAASG,UAAUJ,EAC9C,CACF,GAAG,CAAClC,EAAc0B,EAASG,IAEpB,CAAC7B,EAAcC,EACxB,C","sources":["component/contact/Contact.js","hooks/useElementOnScreen.js"],"sourcesContent":["import React from \"react\";\nimport \"./contact.css\";\nimport { useRef } from \"react\";\nimport { HiOutlineMail } from \"react-icons/hi\";\nimport { BiMessageDetail } from \"react-icons/bi\";\nimport { AiOutlinePhone } from \"react-icons/ai\";\nimport emailjs from \"@emailjs/browser\";\nimport { useElementOnScreen } from \"../../hooks/useElementOnScreen\";\n\nconst Contact = () => {\n  const form = useRef();\n  const [containerRef, isVisible] = useElementOnScreen({\n    reappear: true,\n  });\n\n  const animationText = (animation) => `hide ${isVisible && animation}`;\n\n  const sendEmail = (e) => {\n    e.preventDefault();\n\n    emailjs\n      .sendForm(\n        \"service_vu4mbx6\",\n        \"template_twfz279\",\n        form.current,\n        \"X1dH9OXr1VkqtD01R\"\n      )\n      .then(\n        (result) => {\n          console.log(result.text);\n        },\n        (error) => {\n          console.log(error.text);\n        }\n      );\n\n    e.target.reset(); //after submitting message, the input will clear\n  };\n\n  return (\n    <section id=\"contact\" className=\"section\" ref={containerRef}>\n      <p className={`${animationText(\"appear\")}`}>To know more about me</p>\n      <h2 className={`${animationText(\"appear\")}`}>Contact Me</h2>\n      <div className=\"contact-container \">\n        <div className={`contact-options`}>\n          <section className={`contact-option ${animationText(\"appear_d1\")}`}>\n            <HiOutlineMail />\n            <h4>Email</h4>\n            <h5>peko.claire@gmail.com</h5>\n            <a href=\"mailto:peko.claire@gmail.com\" target=\"_blank\">\n              Send a message\n            </a>\n          </section>\n          <section className={`contact-option ${animationText(\"appear_d1\")}`}>\n            <BiMessageDetail />\n            <h4>Messenger</h4>\n            <h5>莊孟璇 / Peko</h5>\n            <a\n              href=\"https://m.me/profile.php?id=100002676016972\"\n              target=\"_blank\"\n            >\n              Send a message\n            </a>\n          </section>\n          <section className={`contact-option ${animationText(\"appear_d1\")}`}>\n            <AiOutlinePhone />\n            <h4>Phone</h4>\n            <h5>+886 0966096280</h5>\n            <a href=\"tel:+0966096280\" target=\"_blank\">\n              Send a message\n            </a>\n          </section>\n        </div>\n\n        <form\n          ref={form}\n          onSubmit={sendEmail}\n          className={animationText(\"appear_d2\")}\n        >\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Your Full Name\"\n            required\n          />\n          <input type=\"email\" name=\"email\" placeholder=\"Your Email\" required />\n          <textarea\n            name=\"message\"\n            row=\"7\"\n            placeholder=\"Your Message\"\n            required\n          />\n          <button type=\"submit\" className=\"btn btn-contact\">\n            Send Message\n          </button>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default Contact;\n","import { useEffect, useRef, useState } from \"react\";\n\nexport const useElementOnScreen = (options) => {\n  const containerRef = useRef(null);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const makeAppear = (entries) => {\n    const [entry] = entries;\n    if (entry.isIntersecting) {\n      setIsVisible(true);\n    }\n  };\n\n  const makeAppearRepeating = (entries) => {\n    const [entry] = entries;\n    setIsVisible(entry.isIntersecting);\n  };\n\n  const callback = options.reappear ? makeAppearRepeating : makeAppear;\n\n  useEffect(() => {\n    const containerRefCurrent = containerRef.current;\n    const observer = new IntersectionObserver(callback, options);\n\n    if (containerRefCurrent) observer.observe(containerRefCurrent);\n\n    return () => {\n      if (containerRefCurrent) observer.unobserve(containerRefCurrent);\n    };\n  }, [containerRef, options, callback]);\n\n  return [containerRef, isVisible];\n};\n"],"names":["form","useRef","useElementOnScreen","reappear","containerRef","isVisible","animationText","animation","id","className","ref","href","target","onSubmit","e","preventDefault","emailjs","current","then","result","console","log","text","error","reset","type","name","placeholder","required","row","options","useState","setIsVisible","callback","entries","entry","isIntersecting","useEffect","containerRefCurrent","observer","IntersectionObserver","observe","unobserve"],"sourceRoot":""}